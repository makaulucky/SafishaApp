{"version":3,"sources":["matchFontFace.spec.ts"],"names":["describe","it","expect","Roboto_All","toBeUndefined","fontFamily","toEqual","Roboto_Regular","fontWeight","Roboto_Thin","Roboto_Light","Roboto_Medium","Roboto_Bold","Roboto_Black","fontStyle","Roboto_ThinItalic","Roboto_LightItalic","Roboto_Italic","Roboto_MediumItalic","Roboto_BoldItalic","Roboto_BlackItalic"],"mappings":"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","sourcesContent":["import { matchFontFace } from './matchFontFace';\n\nimport {\n  Roboto_All,\n  Roboto_Regular,\n  Roboto_Italic,\n  Roboto_Thin,\n  Roboto_Light,\n  Roboto_Medium,\n  Roboto_Bold,\n  Roboto_Black,\n  Roboto_ThinItalic,\n  Roboto_LightItalic,\n  Roboto_MediumItalic,\n  Roboto_BoldItalic,\n  Roboto_BlackItalic,\n} from '../samples/Roboto';\n\ndescribe('matchFontFace', () => {\n  it('should not find a match for empty input', () => {\n    expect(matchFontFace(Roboto_All, {})).toBeUndefined();\n  });\n\n  it('should not find a match for font family San Francisco', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'San Francisco' })).toBeUndefined();\n  });\n\n  it('should match Roboto_Thin for font family Roboto', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_Thin for font weight 100', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '100' })).toEqual(Roboto_Thin);\n  });\n\n  it('should match Roboto_Thin for font weight 200', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '200' })).toEqual(Roboto_Thin);\n  });\n\n  it('should match Roboto_Light for font weight 300', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '300' })).toEqual(Roboto_Light);\n  });\n\n  it('should match Roboto_Regular for font weight 400', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '400' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_Medium for font weight 500', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '500' })).toEqual(Roboto_Medium);\n  });\n\n  it('should match Roboto_Bold for font weight 600', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '600' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Bold for font weight 700', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '700' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Black for font weight 800', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '800' })).toEqual(Roboto_Black);\n  });\n\n  it('should match Roboto_Black for font weight 900', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '900' })).toEqual(Roboto_Black);\n  });\n\n  it('should match Roboto_Bold for font weight bold', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'bold' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Regular for font weight normal', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'normal' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_ThinItalic for font weight 100 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '100', fontStyle: 'italic' })).toEqual(\n      Roboto_ThinItalic\n    );\n  });\n\n  it('should match Roboto_ThinItalic for font weight 200 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '200', fontStyle: 'italic' })).toEqual(\n      Roboto_ThinItalic\n    );\n  });\n\n  it('should match Roboto_LightItalic for font weight 300 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '300', fontStyle: 'italic' })).toEqual(\n      Roboto_LightItalic\n    );\n  });\n\n  it('should match Roboto_Italic for font weight 400 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '400', fontStyle: 'italic' })).toEqual(\n      Roboto_Italic\n    );\n  });\n\n  it('should match Roboto_MediumItalic for font weight 500 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '500', fontStyle: 'italic' })).toEqual(\n      Roboto_MediumItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight 600 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '600', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight 700 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '700', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_BlackItalic for font weight 800 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '800', fontStyle: 'italic' })).toEqual(\n      Roboto_BlackItalic\n    );\n  });\n\n  it('should match Roboto_BlackItalic for font weight 900 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '900', fontStyle: 'italic' })).toEqual(\n      Roboto_BlackItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight bold and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'bold', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_Italic for font weight normal and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'normal', fontStyle: 'italic' })).toEqual(\n      Roboto_Italic\n    );\n  });\n});\n"]}
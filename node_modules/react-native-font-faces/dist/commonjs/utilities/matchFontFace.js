"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stableSort = stableSort;
exports.matchFontFace = matchFontFace;
exports.compareFontWeightDistance = compareFontWeightDistance;

var _normalizeFontWeight = require("./normalizeFontWeight");

/**
 * The Hermes JS engine does not do a stable sort: https://github.com/facebook/hermes/issues/212
 */
function stableSort(array, ...compareFns) {
  return compareFns.reduce((final, compareFn) => {
    return final.map((item, index) => ({
      item,
      index
    })).sort((a, b) => compareFn(a.item, b.item) || a.index - b.index).map(({
      item
    }) => item);
  }, array);
}
/**
 * Uses a font matching algorithm to choose from the list of given font faces,
 * the most appropriate font face (if any) to use for the given text style.
 *
 * @see https://www.w3.org/TR/CSS2/fonts.html
 */


function matchFontFace(fontFaces, textStyle) {
  return stableSort(fontFaces.filter(ff => filterFontFamilyincludes(ff, textStyle)), (a, b) => compareFontWeightDistance(a, b, textStyle), (a, b) => compareFontStyleExactMatch(a, b, textStyle), (a, b) => compareFontFamilyStartsWith(a, b, textStyle)).find(() => true);
}

function filterFontFamilyincludes(ff, textStyle) {
  return fontFamilyIncludes(ff, textStyle.fontFamily);
}

function compareFontWeightDistance(a, b, textStyle) {
  const aDistance = fontWeightDistance(a, textStyle.fontWeight);
  const bDistance = fontWeightDistance(b, textStyle.fontWeight);
  if (aDistance === bDistance) return 0;else if (aDistance < bDistance) return -1;else if (aDistance > bDistance) return 1;else return 0;
}

function compareFontStyleExactMatch(a, b, textStyle) {
  const aMatches = fontStyleMatches(a, textStyle.fontStyle);
  const bMatches = fontStyleMatches(b, textStyle.fontStyle);
  if (aMatches && bMatches) return 0;else if (aMatches) return -1;else if (bMatches) return 1;else return 0;
}

function compareFontFamilyStartsWith(a, b, textStyle) {
  const aMatches = fontFamilyStartsWith(a, textStyle.fontFamily);
  const bMatches = fontFamilyStartsWith(b, textStyle.fontFamily);
  if (aMatches && bMatches) return 0;else if (aMatches) return -1;else if (bMatches) return 1;else return 0;
}

function fontStyleMatches(fontFace, desiredFontStyle = 'normal') {
  return desiredFontStyle === fontFace.fontStyle;
}

function fontWeightDistance(fontFace, desiredFontWeight = 'normal') {
  const a = (0, _normalizeFontWeight.normalizeFontWeight)(desiredFontWeight);
  const b = (0, _normalizeFontWeight.normalizeFontWeight)(fontFace.fontWeight);
  const d = Math.abs(a - b);
  if (a < 400 && b < a) return d - 1;else if (a > 500 && b > a) return d - 1;else if (a === 400 && b === 500) return d - 1;else if (a === 500 && b === 400) return d - 1;else return d;
}

function fontFamilyIncludes(fontFace, desiredFontFamily = '') {
  return desiredFontFamily.includes(fontFace.fontFamily);
}

function fontFamilyStartsWith(fontFace, desiredFontFamily = '') {
  return desiredFontFamily.startsWith(fontFace.fontFamily);
}
//# sourceMappingURL=matchFontFace.js.map
{"version":3,"sources":["getExpoFontMap.ts"],"names":["getExpoFontMap","fontFaces","obj","fontFace","fontName","remoteUrl","url"],"mappings":";;;;;;;AAEA;;AACA;;AAEO,SAASA,cAAT,CAAwBC,SAAxB,EAA4D;AACjE,QAAMC,GAAgB,GAAG,EAAzB;;AACA,OAAK,MAAMC,QAAX,IAAuBF,SAAvB,EAAkC;AAAA;;AAChC,UAAMG,QAAQ,GAAG,wCAAiBD,QAAjB,CAAjB;AACA,UAAME,SAAS,2BAAG,+CAAoBF,QAApB,CAAH,yDAAG,qBAA+BG,GAAjD;;AACA,QAAID,SAAJ,EAAe;AACbH,MAAAA,GAAG,CAACE,QAAD,CAAH,GAAgBC,SAAhB;AACD;AACF;;AACD,SAAOH,GAAP;AACD","sourcesContent":["import { FontFace } from '../types/FontFace';\nimport { ExpoFontMap } from '../types/ExpoFontMap';\nimport { getLocalFontName } from './getLocalFontName';\nimport { getExpoFontMapEntry } from './getExpoFontMapEntry';\n\nexport function getExpoFontMap(fontFaces: FontFace[]): ExpoFontMap {\n  const obj: ExpoFontMap = {};\n  for (const fontFace of fontFaces) {\n    const fontName = getLocalFontName(fontFace);\n    const remoteUrl = getExpoFontMapEntry(fontFace)?.url;\n    if (remoteUrl) {\n      obj[fontName] = remoteUrl;\n    }\n  }\n  return obj;\n}\n"]}
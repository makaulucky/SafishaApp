{"version":3,"sources":["matchFontFace.spec.ts"],"names":["matchFontFace","Roboto_All","Roboto_Regular","Roboto_Italic","Roboto_Thin","Roboto_Light","Roboto_Medium","Roboto_Bold","Roboto_Black","Roboto_ThinItalic","Roboto_LightItalic","Roboto_MediumItalic","Roboto_BoldItalic","Roboto_BlackItalic","describe","it","expect","toBeUndefined","fontFamily","toEqual","fontWeight","fontStyle"],"mappings":"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","sourcesContent":["import { matchFontFace } from './matchFontFace';\n\nimport {\n  Roboto_All,\n  Roboto_Regular,\n  Roboto_Italic,\n  Roboto_Thin,\n  Roboto_Light,\n  Roboto_Medium,\n  Roboto_Bold,\n  Roboto_Black,\n  Roboto_ThinItalic,\n  Roboto_LightItalic,\n  Roboto_MediumItalic,\n  Roboto_BoldItalic,\n  Roboto_BlackItalic,\n} from '../samples/Roboto';\n\ndescribe('matchFontFace', () => {\n  it('should not find a match for empty input', () => {\n    expect(matchFontFace(Roboto_All, {})).toBeUndefined();\n  });\n\n  it('should not find a match for font family San Francisco', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'San Francisco' })).toBeUndefined();\n  });\n\n  it('should match Roboto_Thin for font family Roboto', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_Thin for font weight 100', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '100' })).toEqual(Roboto_Thin);\n  });\n\n  it('should match Roboto_Thin for font weight 200', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '200' })).toEqual(Roboto_Thin);\n  });\n\n  it('should match Roboto_Light for font weight 300', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '300' })).toEqual(Roboto_Light);\n  });\n\n  it('should match Roboto_Regular for font weight 400', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '400' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_Medium for font weight 500', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '500' })).toEqual(Roboto_Medium);\n  });\n\n  it('should match Roboto_Bold for font weight 600', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '600' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Bold for font weight 700', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '700' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Black for font weight 800', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '800' })).toEqual(Roboto_Black);\n  });\n\n  it('should match Roboto_Black for font weight 900', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '900' })).toEqual(Roboto_Black);\n  });\n\n  it('should match Roboto_Bold for font weight bold', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'bold' })).toEqual(Roboto_Bold);\n  });\n\n  it('should match Roboto_Regular for font weight normal', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'normal' })).toEqual(Roboto_Regular);\n  });\n\n  it('should match Roboto_ThinItalic for font weight 100 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '100', fontStyle: 'italic' })).toEqual(\n      Roboto_ThinItalic\n    );\n  });\n\n  it('should match Roboto_ThinItalic for font weight 200 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '200', fontStyle: 'italic' })).toEqual(\n      Roboto_ThinItalic\n    );\n  });\n\n  it('should match Roboto_LightItalic for font weight 300 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '300', fontStyle: 'italic' })).toEqual(\n      Roboto_LightItalic\n    );\n  });\n\n  it('should match Roboto_Italic for font weight 400 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '400', fontStyle: 'italic' })).toEqual(\n      Roboto_Italic\n    );\n  });\n\n  it('should match Roboto_MediumItalic for font weight 500 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '500', fontStyle: 'italic' })).toEqual(\n      Roboto_MediumItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight 600 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '600', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight 700 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '700', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_BlackItalic for font weight 800 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '800', fontStyle: 'italic' })).toEqual(\n      Roboto_BlackItalic\n    );\n  });\n\n  it('should match Roboto_BlackItalic for font weight 900 and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: '900', fontStyle: 'italic' })).toEqual(\n      Roboto_BlackItalic\n    );\n  });\n\n  it('should match Roboto_BoldItalic for font weight bold and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'bold', fontStyle: 'italic' })).toEqual(\n      Roboto_BoldItalic\n    );\n  });\n\n  it('should match Roboto_Italic for font weight normal and font style italic', () => {\n    expect(matchFontFace(Roboto_All, { fontFamily: 'Roboto', fontWeight: 'normal', fontStyle: 'italic' })).toEqual(\n      Roboto_Italic\n    );\n  });\n});\n"]}
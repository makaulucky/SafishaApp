var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import dedent from 'ts-dedent';
import { getExpoFontMapEntry } from './getExpoFontMapEntry';
import { getLocalFontName } from './getLocalFontName';
export function generateInlineStyle(fontFace) {
  return dedent(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    @font-face {\n      font-family: '", "';\n      font-style: ", ";\n      font-weight: ", ";\n      font-display: auto;\n      src: ", ";\n    }"])), fontFace.fontFamily, fontFace.fontStyle, fontFace.fontWeight, extractSourceString(fontFace));
}

function extractSourceString(fontFace) {
  const fontName = getLocalFontName(fontFace);
  const remoteUrl = getExpoFontMapEntry(fontFace);

  if (remoteUrl) {
    return "local('".concat(fontFace.fontFamily, "'), local('").concat(fontName, "'), url(").concat(remoteUrl.url, ") format('").concat(remoteUrl.format, "')");
  } else {
    return "local('".concat(fontFace.fontFamily, "'), local('").concat(fontName, "');");
  }
}
//# sourceMappingURL=generateInlineStyle.js.map